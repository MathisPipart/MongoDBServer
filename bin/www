#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('mongo-example:server');
var http = require('http');

/**
 * Retrieves the port from the environment variables or defaults to 3001.
 * Normalizes the port into a number, string, or false, and sets it in the Express app.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Creates an HTTP server using the Express app instance.
 */

var server = http.createServer(app);

/**
 * Starts listening on the specified port and attaches event listeners
 * for handling server errors and successful startup.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalizes a port value into a number, a string (for named pipes), or false.
 *
 * @param {string} val - The port value to normalize.
 * @returns {number|string|false} The normalized port value.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for handling "error" events emitted by the HTTP server.
 *
 * @param {Object} error - The error object describing the server issue.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for handling the "listening" event emitted by the HTTP server.
 * Logs a message indicating that the server is successfully running.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
